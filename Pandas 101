# -*- coding: utf-8 -*-
"""
Created on Tue Jan 29 18:26:12 2019

@author: vuppuluri
"""

import pandas as pd
import numpy as np

## assignment 1 :How to import pandas and check the version?

import pandas as pd
print(pd.__version__)

#### assignment 2 :Create a pandas series from each of the items below: a list, numpy and a dictionary

mylist = list('abcedfghijklmnopqrstuvwxyz')
myarr = np.arange(26)
mydict = dict(zip(mylist, myarr))

a=pd.Series(mylist)
b=pd.Series(myarr)
c=pd.Series(mydict)

###Assignment :Convert the series ser into a dataframe with its index as another column on the dataframe.

mylist = list('abcedfghijklmnopqrstuvwxyz')
myarr = np.arange(26)
mydict = dict(zip(mylist, myarr))
ser = pd.Series(mydict)

df=pd.DataFrame(ser,index=False)
ser.to_frame()


####### asssignment 4 :How to combine many series to form a dataframe?

import numpy as np
ser1 = pd.Series(list('abcedfghijklmnopqrstuvwxyz'))
ser2 = pd.Series(np.arange(26))

df=pd.DataFrame(pd.concat([ser1,ser2],axis=1))

######## asssingment 5 :Give a name to the series ser calling it ‘alphabets’.### CHECK AGAIN

ser = pd.Series(list('abcedfghijklmnopqrstuvwxyz'))


#### assignment 6 :From ser1 remove items present in ser2.

ser1 = pd.Series([1, 2, 3, 4, 5])
ser2 = pd.Series([4, 5, 6, 7, 8])

np.setdiff1d(ser1,ser2)
ser1[~ser1.isin(ser2)]

### asssingment 7 :Get all items of ser1 and ser2 not common to both.

ser1 = pd.Series([1, 2, 3, 4, 5])
ser2 = pd.Series([4, 5, 6, 7, 8])

pd.concat([ser1[~ser1.isin(ser2)],ser2[~ser2.isin(ser1)]])

########## assignment 8 :ompute the minimum, 25th percentile, median, 75th, and maximum of ser.ompute the minimum, 25th percentile, median, 75th, and maximum of ser.

ser = pd.Series(np.random.normal(10, 5, 25))

ser.min()
np.percentile(ser,25)
np.median(ser)
np.percentile(ser,75)
ser.max()

#### assignment 9 :Calculte the frequency counts of each unique value ser.

ser = pd.Series(np.take(list('abcdefgh'), np.random.randint(8, size=30)))
ser.value_counts()

##assingment 10 :From ser, keep the top 2 most frequent items as it is and replace everything else as ‘Other’.

np.random.RandomState(100)
ser = pd.Series(np.random.randint(1, 5, [12]))
ser.sort_values(ascending=False).unique()[0:2]
ser[~ser.isin(ser.sort_values(ascending=False).unique()[0:2])]='other'
## alternate solution
ser[~ser.isin(ser.value_counts().index[:2])] = 'Other'

#### assignment 11 :Bin the series ser into 10 equal deciles and replace the values with the bin name ## need to check

ser = pd.Series(np.random.random(20))

count=(ser.size)/2

ser.sort_values()

for key,value in  ser.iteriems():
    print(key,value)

#### assignment 11 :eshape the series ser into a dataframe with 7 rows and 5 columns
    
    ser=pd.Series(np.random.randint(1,100,35))
    df=pd.DataFrame(ser.reshape(7,5))
    
    #### assignment 13 :Find the positions of numbers that are multiples of 3 from ser.
    ser = pd.Series(np.random.randint(1, 10, 7))
    ser%3
    
    ser[ser%3==0].index
    
    ##### asssignment 14 :From ser, extract the items at positions in list pos.
    ser = pd.Series(list('abcdefghijklmnopqrstuvwxyz'))
pos = [0, 4, 8, 14, 20]

ser[pos]

############ asssingment 15 :Stack ser1 and ser2 vertically and horizontally (to form a dataframe).

ser1 = pd.Series(range(5))
ser2 = pd.Series(list('abcde'))

df1=pd.DataFrame(pd.concat([ser1,ser2],axis=1))

#### asssignment 16 :Get the positions of items of ser2 in ser1 as a list.

ser1 = pd.Series([10, 9, 6, 5, 3, 1, 12, 8, 13])
ser2 = pd.Series([1, 3, 10, 13])

ser1[ser1.isin(ser2)].index

######## assignmet 17 :Compute the mean squared error of truth and pred series.
truth = pd.Series(range(10))
pred = pd.Series(range(10)) + np.random.random(10)
np.mean((truth-pred)**2)

### asssignment 18 :Change the first character of each word to upper case in each word of ser

ser = pd.Series(['how', 'to', 'kick', 'ass?'])

for key in ser:
    print((key.upper()[0])+key[1:])
    
    ### asssignment 19 :How to calculate the number of characters in each word in a series
    
    ser = pd.Series(['how', 'to', 'kick', 'ass?'])
    
    for key in ser:
        print(len(key))
        
        alternate soliution :
            ser.map(lambda x: len(x))
        
        ##### assignment 20 :Difference of differences between the consequtive numbers of ser
        
        ser = pd.Series([1, 3, 6, 10, 15, 21, 27, 35])
        a=np.nan
        b=2
        a-b
        print(ser.diff().tolist())
print(ser.diff().diff().tolist())
        
        
        



# -*- coding: utf-8 -*-
"""
Created on Wed Jan  9 12:10:20 2019

@author: vuppuluri
"""

import numpy as np
import sys

## ASSSIGNMENT 1 :Import numpy as np and see the version ###########

print(np.version.version)


## ASSSIGNMENT 2 :Create a 1D array of numbers from 0 to 9 ###########

id_array=np.array(range(0,10,1))
id_array=np.arange(0,10,1)


## ASSSIGNMENT 3 :Create a 3Ã—3 numpy array of all Trueâ€™s ###########


array1=np.arange(0,9,1).reshape(3,3)
array2=array1<10
print (array2)

#Alternate solutions:
    np.full((3,3),True,dtype=bool) 
    np.ones((3,3),dtype=bool)
    np.zeros((3,3),dtype=bool)   ### creates all flse
    

## ASSSIGNMENT 4 Extract all odd numbers from arr###########

array1=np.arange(1,20,1)
array2=array1%2

for element in array1:
    if element % 2 ==1 :
        array2.append(element)
        
#alternate solution :
    
    array1[array1 % 2 == 1]
        

## ASSSIGNMENT 5 :Replace all odd numbers in arr with -1 ###########

array1=np.arange(1,20,1)
cnt=len(array1)
for ind in range(0,cnt,1):
    if array1[ind] % 2 ==1 :
        array1[ind]=-1
        
        
#alternate solution :
        array1[array1%2 == 1] =-1
        
    
## ASSSIGNMENT 6 :Replace all odd numbers in arr with -1 without changing arr ###########
      arr = np.arange(10)
out = np.where(arr % 2 == 1, -1, arr)  

## ASSSIGNMENT 7 : Convert a 1D array to a 2D array with 2 rows

array=np.arange(10)
array.reshape(2,5)
array.reshape(2,-1)  ### -1 automatically detects number of columns


## ASSSIGNMENT 8 tack arrays a and b vertically:

a = np.arange(10).reshape(2,-1)
b = np.repeat(1, 10).reshape(2,-1)

np.concatenate((a,b),axis=0)

#alternate solution:
    np.vstack([a, b])

## ASSSIGNMENT 9 Stack the arrays a and b horizontally. :

a = np.arange(10).reshape(2,-1)

b = np.repeat(1, 10).reshape(2,-1)

np.concatenate((a,b),axis=1)
#alternate solution :
    np.hstack([a, b])
    
    
    
## ASSSIGNMENT 10 Create the following pattern without hardcoding. Use only numpy functions and the below input array a. :

Input:

a = np.array([1,2,3])
Desired Output:

#> array([1, 1, 1, 2, 2, 2, 3, 3, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])
 b=[]   
  for element in a :
      b.extend(np.repeat(element,3))
b.extend(np.repeat(a,3))
    
alternate solution :
    np.concatenate((np.repeat(a,3),np.tile(a, 3)),axis=0)
    
    
    
 
    

## ASSSIGNMENT 11 Get the common items between a and b :
a = np.array([1,2,3,2,3,4,3,4,5,6])
b = np.array([7,2,10,2,7,4,9,4,9,8])

np.intersect1d(a,b)

# -*- coding: utf-8 -*-
"""
Created on Wed Jan 23 20:58:04 2019

@author: Venkat Durga Rao
"""

 

import numpy as np


############# ASSIGNMENT 12 :From array a remove all items present in array b

a = np.array([1,2,3,4,5])
b = np.array([5,6,7,8,9])

np.intersect1d(a,b)  #### like intersect in sql
np.setdiff1d(a,b)  ### like minus in sql


################  ASSIGM=NMENT 13 :Get the positions where elements of a and b match

a = np.array([1,2,3,2,3,4,3,4,5,6])
b = np.array([7,2,10,2,7,4,9,4,9,8])

np.where(a==b)  ####  where class returns the position of index 
np.where(a<5)

######  ASSIGNMENT 14 Get all items between 5 and 10 from a.

a = np.array([2, 6, 1, 9, 10, 3, 27])


a[np.where((a >= 5) & (a <= 10))]


# Method 3: (thanks loganzk!)
a[(a >= 5) & (a <= 10)]

##### ASSIGNMENT 15Convert the function maxx that works on two scalars, to work on two arrays.

def maxx(x, y):
    """Get the maximum of two items"""
    
    if x >= y:
        return x
    else:
        return y

maxx(1, 5)
#> 5

a = np.array([5, 7, 9, 8, 6, 4, 5])
b = np.array([6, 3, 4, 8, 9, 7, 1])

pair_max=np.vectorize(maxx)
pair_max(a, b)

###########assignment 16 :Swap columns 1 and 2 in the array arr.
arr = np.arange(9).reshape(3,3)
arr[:,[1,0,2]]

######3  assignment 17 :Swap rows 1 and 2 in the array arr:
arr = np.arange(9).reshape(3,3)
arr[[1,0,2],:]

############# assignment 18 Reverse the rows of a 2D array arr.

arr = np.arange(9).reshape(3,3)

## Method 1 
arr[np.arange(2,-1,-1),:]
## Method 2 
arr[::-1]

#### assignment 19 Reverse the columns of a 2D array arr.

arr = np.arange(9).reshape(3,3)

# Solution
arr[:, ::-1]

arr[:,np.arange(2,-1,-1)]

####Assignment 20:Create a 2D array of shape 5x3 to contain random decimal numbers between 5 and 10.

np.random.randint(low=5,high=10,size=(5,3))
np.random.uniform(5,10,size=(5,3))


#### assignment 21 :Print or show only 3 decimal places of the numpy array rand_arr.

rand_arr=np.random.random(size=(5,3))
np.set_printoptions(precision=3)
rand_arr

####### assignment 22 :Pretty print rand_arr by suppressing the scientific notation (like 1e10)


np.random.seed(100)
rand_arr = np.random.random([3,3])/1e3
rand_arr

np.set_printoptions(suppress=True)
rand_arr


#### assignment 23 :Limit the number of items printed in python numpy array a to a maximum of 6 elements.


#> array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])

np.set_printoptions(threshold=2)
a = np.arange(15)
a

######## assignment 24 :Print the full numpy array a without truncating.

np.set_printoptions(threshold=np.nan)
a = np.arange(15)
a


################ assignment 25 :Import the iris dataset keeping the text intact.

################ assignment 25 :Import the iris dataset keeping the text intact.

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'

iris=np.genfromtxt(url,delimiter=',',dtype=object)
names = ('sepallength', 'sepalwidth', 'petallength', 'petalwidth', 'species')
iris


########### assignment 26 : extract particular column from one dimensional array of tuples ###

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'

iris=np.genfromtxt(url,delimiter=',',dtype=None)
iris.shape



############3 assignment :28 find the mean of numpy array mean,mode,standard deviation

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris = np.genfromtxt(url, delimiter=',', dtype='object')
sepallength = np.genfromtxt(url, delimiter=',', dtype='float', usecols=[0,1])


np.mean(sepallength[:,0])
np.median(sepallength)
np.std(sepallength)

##############3  assignment 29 . Create a normalized form of iris's sepallength whose values
### range exactly between 0 and 1 so that the minimum has value 0 and maximum has value 1.


url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris = np.genfromtxt(url, delimiter=',', dtype='object')
sepallength = np.genfromtxt(url, delimiter=',', dtype='float', usecols=[0])

sepallength=sepallength/np.max(sepallength)


######### assignment 30 : compute the softmax score 

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
sepallength = np.genfromtxt(url, delimiter=',', dtype='float', usecols=[0])


def soft_max(x):
 e_x = np.exp(x - np.max(x))
 return e_x / e_x.sum(axis=0)

soft_max(sepallength)


####assignment 31 :Find the 5th and 95th percentile of iris's sepallength

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
sepallength = np.genfromtxt(url, delimiter=',', dtype='float', usecols=[0])

np.percentile(sepallength,[5,95])


####### assignment 32 :Insert np.nan values at 20 random positions in iris_2d dataset

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris_2d = np.genfromtxt(url, delimiter=',', dtype='object')
iris_2d.shape

list1=np.random.randint(0,149,size=20)
list1

iris_2d[]

i, j = np.where(iris_2d)

np.random.seed(100)
iris_2d[np.random.choice((i), 20), np.random.choice((j), 20)] = np.nan

#############3  assignment 33 :Find the number and position of missing values in iris_2d's sepallength (1st column)

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris_2d = np.genfromtxt(url, delimiter=',', dtype='float')
iris_2d[np.random.randint(150, size=20), np.random.randint(4, size=20)] = np.nan

np.isnan(iris_2d[:,0]).sum()  ## no of missing values
print(np.where(np.isnan(iris_2d)))

############  assignment 34 :Filter the rows of iris_2d that has petallength (3rd column) > 1.5 and
 sepallength (1st column) < 5.0

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris_2d = np.genfromtxt(url, delimiter=',', dtype='float', usecols=[0,1,2,3])

condition = (iris_2d[:, 2] > 1.5) & (iris_2d[:, 0] < 5.0)
iris_2d[condition]


########   assignment 36 : Select the rows of iris_2d that does not have any nan value.


url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris_2d = np.genfromtxt(url, delimiter=',', dtype='float', usecols=[0,1,2,3])

iris_2d[np.random.randint(0,150,size=20),np.random.randint(0,4,size=20)]=np.nan


iris_2d[np.sum(np.isnan(iris_2d), axis = 1) == 0]  ###  find the total no of nulls present  in each record and equate to zero


#############3 assignment 36 :Find the correlation between SepalLength(1st column) and PetalLength(3rd column) in iris_2d
#

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris_2d = np.genfromtxt(url, delimiter=',', dtype='float', usecols=[0,1,2,3])


np.corrcoef(iris_2d[:,0],iris_2d[:,2])

  ###### assignment 37 :Find out if iris_2d has any missing values.
  
  url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris_2d = np.genfromtxt(url, delimiter=',', dtype='float', usecols=[0,1,2,3])



np.isnan(iris_2d).any()

#########################  assignment 38 :Replace all ccurrences of nan with 0 in numpy array

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris_2d = np.genfromtxt(url, delimiter=',', dtype='float', usecols=[0,1,2,3])
iris_2d[np.random.randint(150, size=20), np.random.randint(4, size=20)] = np.nan

iris_2d[np.where(np.isnan(iris_2d))]=0
iris_2d[np.isnan(iris_2d)]=0

np.isnan(iris_2d).any()


#################333  assignment 39 :Find the unique values and the count of unique values in iris's species
url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris = np.genfromtxt(url, delimiter=',', dtype='object')
names = ('sepallength', 'sepalwidth', 'petallength', 'petalwidth', 'species')


np.unique(iris[:,4],return_counts=True)

############ assignments 40 :Bin the petal length (3rd) column of iris_2d to form a text array, such that if petal length is:

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris = np.genfromtxt(url, delimiter=',', dtype='object')
names = ('sepallength', 'sepalwidth', 'petallength', 'petalwidth', 'species')


solution 1 :

# Bin petallength 
petal_length_bin = np.digitize(iris[:, 2].astype('float'), [0, 3, 5, 10])

# Map it to respective category
label_map = {1: 'small', 2: 'medium', 3: 'large', 4: np.nan}
petal_length_cat = [label_map[x] for x in petal_length_bin]

# View
petal_length_cat[:4]
<#> ['small', 'small', 'small', 'small']

solution 2 :  using vectorization
    
    def category(x) :
         if x >=0 and x<=3:
             return 'small'
         elif x<=5:
             return 'medium'
         elif x > 5:
             return 'large'
         else :
             return  np.nan
         
vec_cat=np.vectorize(category)
ct_col=vec_cat(iris_2d[:,2])

ct_col = ct_col[:, np.newaxis]



iris_2d = np.hstack([iris_2d, ct_col])

iris_2d




 ##### assignment 41 :Create a new column for volume in iris_2d, where volume is (pi x petallength x sepal_length^2)/3

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris_2d = np.genfromtxt(url, delimiter=',', dtype='object')
names = ('sepallength', 'sepalwidth', 'petallength', 'petalwidth', 'species')

petallength = iris_2d[:, 2].astype('float')
volume = (np.pi * petallength * (sepallength**2))/3

# Introduce new dimension to match iris_2d's
volume = volume[:, np.newaxis]

# Add the new column
out = np.hstack([iris_2d, volume])

############### assignment 42 :Randomly sample iris's species such that setose is twice the number of versicolor and virginica


url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris = np.genfromtxt(url, delimiter=',', dtype='object')

np.random.seed(100)

probs=np.r_[np.linspace(0,0.500,num=50),np.linspace(0.501,0.750,num=25),np.linspace(0.751,1.0,num=50)]
index=np.searchsorted(probs,np.random.random(150))
species_out=species[index]

np.unique(iris[:,4])


###Assignment 43 :What is the value of second longest petallength of species setosa

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris = np.genfromtxt(url, delimiter=',', dtype='object')
names = ('sepallength', 'sepalwidth', 'petallength', 'petalwidth', 'species')


petal_len_setosa = iris[iris[:, 4] == b'Iris-setosa'][:,-2].astype('float')



np.unique(np.sort(petal_len_setosa))[-2]
#assignment 44 :Sort the iris dataset based on sepallength column.

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris = np.genfromtxt(url, delimiter=',', dtype='object')
names = ('sepallength', 'sepalwidth', 'petallength', 'petalwidth', 'species')

iris[iris[:,0].argsort()]

np.


############3 assignment 45 :Find the most frequent value of petal length (3rd column) in iris dataset.

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris = np.genfromtxt(url, delimiter=',', dtype='object')
names = ('sepallength', 'sepalwidth', 'petallength', 'petalwidth', 'species')


iris[:,-2].unique[-1]
vals,counts = np.unique(iris[:,-2],return_counts=True)

print(vals[np.argmax(counts)])


################# assignment 46 :Find the position of the first occurrence of a value greater than 1.0 in petalwidth 4th column of iris dataset.

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris = np.genfromtxt(url, delimiter=',', dtype='float')

iris[iris[:,3] > 1.0][0]

## alternate solution 

np.argwhere(iris[:, 3].astype(float) > 1.0)[0]

#### assignment 47 :From the array a, replace all values greater than 30 to 30 and less than 10 to 10.

np.random.seed(100)
a = np.random.uniform(1,50, 20)
a[a>30] =30
a[a<10] =10

alternate solution :
    print(np.where(a < 10, 10, np.where(a > 30, 30, a)))
    
    #### assignment 48 :Get the positions of top 5 maximum values in a given array a.

np.random.seed(100)
a = np.random.uniform(1,50, 20)

np.where(a in np.sort(a)[np.arange(0,5)])

np.sort(a)[np.arange(-1,-6)]

# Method 2:
np.sort(a)[-5:]

# Method 3:
np.partition(a, kth=-5)[-5:]

# Method 4:
a[np.argpartition(-a, 5)][:5]


#assignment 49Compute the counts of unique values row-wise.

np.random.seed(100)
arr = np.random.randint(1,11,size=(6, 10))
def counts_of_all_values_rowwise(arr2d):
    # Unique values and its counts row wise
    num_counts_array = [np.unique(row, return_counts=True) for row in arr2d]

    # Counts of all values row wise
    return([[int(b[a==i]) if i in a else 0 for i in np.unique(arr2d)] for a, b in num_counts_array])

# Print
print(np.arange(1,11))
counts_of_all_values_rowwise(arr) 

#### assignment 50 :Convert array_of_arrays into a flat linear 1d array.

arr1 = np.arange(3)
arr2 = np.arange(3,7)
arr3 = np.arange(7,10)

array_of_arrays = np.array([arr1, arr2, arr3])
array_of_arrays
#> array([array([0, 1, 2]), array([3, 4, 5, 6]), array([7, 8, 9])], dtype=object)

arr_2d = np.concatenate(array_of_arrays)


############  asssignment 51 :Compute the one-hot encodings (dummy binary variables for each unique value in the array)

np.random.seed(101)
arr=np.random.randint(1,4,6)

def one_hot_encodings(arr):
    uniqs = np.unique(arr)
    out = np.zeros((arr.shape[0], uniqs.shape[0]))
    for i, k in enumerate(arr):
        out[i, k-1] = 1
    return out

one_hot_encodings(arr)
#

#### assignment 52 :Create row numbers grouped by a categorical variable. Use the following sample from iris species as input.

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
species = np.genfromtxt(url, delimiter=',', dtype='str', usecols=4)
np.random.seed(100)
species_small = np.sort(np.random.choice(species, size=20))

print([i for val in np.unique(species_small) for i, grp in enumerate(species_small[species_small==val])])

##### assignment 53 :Create group ids based on a given categorical variable. Use the following sample from iris species as input.s
species = np.genfromtxt(url, delimiter=',', dtype='str', usecols=4)
species_small = np.sort(np.random.choice(species, size=20))
species_small

i=0
group_id=0
list1=[]
for species  in  species_small:
    if i==0 :
        list1.append[group_id]
        i=i+1;
        
    elif species_small[i] ==  species_small[i+1]:
        list1.append[group_id]
        i=i+1
    else:
        list1.append[group_id+1]
        i=i+1
        
############# assignment 54 : Create the ranks for the given numeric array a.
        
        np.random.seed(10)
a = np.random.randint(20, size=10)


a.argsort().argsort()

######## assignment 55:How to rank items in a multidimensional array using numpy?

np.random.seed(10)
a = np.random.randint(20, size=[2,5])
print(a)

print(a.ravel().argsort().argsort().reshape(a.shape))

#### assignment 56 :How to find the maximum value in each row of a numpy array 2d?


np.random.seed(100)
a = np.random.randint(1,10, [5,3])
a

# Solution 1
np.amax(a, axis=1)

# Solution 2
np.apply_along_axis(np.max, arr=a, axis=1)

###### assignment 57 :Compute the min-by-max for each row for given 2d numpy array.

np.random.seed(100)
a = np.random.randint(1,10, [5,3])

np.amin(a,axis=1)

alternate solution :
    np.apply_along_axis(lambda x: np.min(x)/np.max(x), arr=a, axis=1)
#> array([ 0.44444444,  0.125     ,  0.5       ,  1.        ,  0.11111111])
    
    #### assignment 58 :Find the duplicate entries (2nd occurrence onwards) in the given numpy array and mark them as True. First time occurrences should be False.


    np.random.seed(100)
a = np.random.randint(0, 5, 10)

## Solution
# There is no direct function to do this as of 1.13.3

# Create an all True array
out = np.full(a.shape[0], True)

# Find the index positions of unique elements
unique_positions = np.unique(a, return_index=True)[1]

# Mark those positions as False
out[unique_positions] = False

print(out)
### # assignment 59 :Find the mean of a numeric column grouped by a categorical column in a 2D numpy array

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris = np.genfromtxt(url, delimiter=',', dtype='object')
names = ('sepallength', 'sepalwidth', 'petallength', 'petalwidth', 'species')




# Solution
# No direct way to implement this. Just a version of a workaround.
numeric_column = iris[:, 1].astype('float')  # sepalwidth
grouping_column = iris[:, 4]  # species

# List comprehension version
[[group_val, numeric_column[grouping_column==group_val].mean()] for group_val in np.unique(grouping_column)]

# For Loop version
output = []
for group_val in np.unique(grouping_column):
    output.append([group_val, numeric_column[grouping_column==group_val].mean()])


####Assignment 60 :How to convert a PIL image to numpy array?
    
    from io import BytesIO
from PIL import Image
import PIL, requests

# Import image from URL
URL = 'https://upload.wikimedia.org/wikipedia/commons/8/8b/Denali_Mt_McKinley.jpg'
response = requests.get(URL)

# Read it as Image
I = Image.open(BytesIO(response.content))

# Optionally resize
I = I.resize([150,150])

# Convert to numpy array
arr = np.asarray(I)

# Optionaly Convert it back to an image and show
im = PIL.Image.fromarray(np.uint8(arr))
Image.Image.show(im)


#########assignment 61:Drop all nan values from a 1D numpy array

a=np.array([1,2,3,np.nan,5,6,7,np.nan])

np.delete(a,np.nan)

a[~np.isnan(a)]

##################  assignment 62 :Compute the euclidean distance between two arrays a and b.

a = np.array([1,2,3,4,5])
b = np.array([4,5,6,7,8])

dist = np.linalg.norm(a-b)
########3 assignment 63 :Find all the peaks in a 1D numpy array a. Peaks are points surrounded by smaller values on both sides.

a = np.array([1, 3, 7, 1, 2, 6, 0, 1])
i=1
cnt=len(a)-2
while (i<=cnt) :
    if a[i] > a[i-1] and a[i] < a[i+1]:
        print (a[i])
        i=i+1
        
        
####### assignment 64 :Subtract the 1d array b_1d from the 2d array a_2d, such that each item of b_1d subtracts from respective row of a_2d.
        
        
 a_2d = np.array([[3,3,3],[4,4,4],[5,5,5]])
b_1d = np.array([1,1,1])
i=1
while  (i <= a_2d.shape[0]):
    print(a_2d[i-1]-b_1d)
    i=i+1

#############  assignment 65 :Find the index of 5th repetition of number 1 in x.

x = np.array([1, 2, 1, 1, 3, 4, 3, 1, 1, 2, 1, 1, 2])

(np.where(x==1))[0][4]


#########  assignment 66 :Convert numpy's datetime64 object to datetime's datetime object

# Input: a numpy datetime64 object
dt64 = np.datetime64('2018-02-25 22:10:10')

dt64.astype(datetime)


########  assignment 67 :Compute the moving average of window size 3, for the given 1D array.

np.random.seed(100)
Z = np.random.randint(10, size=10)

def moving_average(a, n=3) :
    ret = np.cumsum(a, dtype=float)
    ret[n:] = ret[n:] - ret[:-n]
    return ret[n - 1:] / n

np.random.seed(100)
Z = np.random.randint(10, size=10)
print('array: ', Z)
# Method 1
moving_average(Z, n=3).round(2)

########## assignment 68 :Create a numpy array of length 10, starting from 5 and has a step of 3 between consecutive numbers

a=np.arange(5,33,3)


########### assignment 69:Given an array of a non-continuous sequence of dates. Make it a continuous sequence of dates, by filling in the missing dates.

dates = np.arange(np.datetime64('2018-02-01'), np.datetime64('2018-02-25'), 2)
print(dates)
#> ['2018-02-01' '2018-02-03' '2018-02-05' '2018-02-07' '2018-02-09'
#>  '2018-02-11' '2018-02-13' '2018-02-15' '2018-02-17' '2018-02-19'
#>  '2018-02-21' '2018-02-23']


def fill_missing_dates (x):
    cnt=len(dates)
    i=1
    start=x[0]
    for date in dates:
        if []:
            
######### assignment 70 :. From the given 1d array arr, generate a 2d matrix using strides, with a window length of 4 and strides of 2, like [[0,1,2,3], [2,3,4,5], [4,5,6,7]..]
            
            def gen_strides(a, stride_len=5, window_len=5):
    n_strides = ((a.size-window_len)//stride_len) + 1
    # return np.array([a[s:(s+window_len)] for s in np.arange(0, a.size, stride_len)[:n_strides]])
    return np.array([a[s:(s+window_len)] for s in np.arange(0, n_strides*stride_len, stride_len)])

print(gen_strides(np.arange(15), stride_len=2, window_len=4))









      

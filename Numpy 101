# -*- coding: utf-8 -*-
"""
Created on Wed Jan  9 12:10:20 2019

@author: vuppuluri
"""

import numpy as np
import sys

## ASSSIGNMENT 1 :Import numpy as np and see the version ###########

print(np.version.version)


## ASSSIGNMENT 2 :Create a 1D array of numbers from 0 to 9 ###########

id_array=np.array(range(0,10,1))
id_array=np.arange(0,10,1)


## ASSSIGNMENT 3 :Create a 3Ã—3 numpy array of all Trueâ€™s ###########


array1=np.arange(0,9,1).reshape(3,3)
array2=array1<10
print (array2)

#Alternate solutions:
    np.full((3,3),True,dtype=bool) 
    np.ones((3,3),dtype=bool)
    np.zeros((3,3),dtype=bool)   ### creates all flse
    

## ASSSIGNMENT 4 Extract all odd numbers from arr###########

array1=np.arange(1,20,1)
array2=array1%2

for element in array1:
    if element % 2 ==1 :
        array2.append(element)
        
#alternate solution :
    
    array1[array1 % 2 == 1]
        

## ASSSIGNMENT 5 :Replace all odd numbers in arr with -1 ###########

array1=np.arange(1,20,1)
cnt=len(array1)
for ind in range(0,cnt,1):
    if array1[ind] % 2 ==1 :
        array1[ind]=-1
        
        
#alternate solution :
        array1[array1%2 == 1] =-1
        
    
## ASSSIGNMENT 6 :Replace all odd numbers in arr with -1 without changing arr ###########
      arr = np.arange(10)
out = np.where(arr % 2 == 1, -1, arr)  

## ASSSIGNMENT 7 : Convert a 1D array to a 2D array with 2 rows

array=np.arange(10)
array.reshape(2,5)
array.reshape(2,-1)  ### -1 automatically detects number of columns


## ASSSIGNMENT 8 tack arrays a and b vertically:

a = np.arange(10).reshape(2,-1)
b = np.repeat(1, 10).reshape(2,-1)

np.concatenate((a,b),axis=0)

#alternate solution:
    np.vstack([a, b])

## ASSSIGNMENT 9 Stack the arrays a and b horizontally. :

a = np.arange(10).reshape(2,-1)

b = np.repeat(1, 10).reshape(2,-1)

np.concatenate((a,b),axis=1)
#alternate solution :
    np.hstack([a, b])
    
    
    
## ASSSIGNMENT 10 Create the following pattern without hardcoding. Use only numpy functions and the below input array a. :

Input:

a = np.array([1,2,3])
Desired Output:

#> array([1, 1, 1, 2, 2, 2, 3, 3, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])
 b=[]   
  for element in a :
      b.extend(np.repeat(element,3))
b.extend(np.repeat(a,3))
    
alternate solution :
    np.concatenate((np.repeat(a,3),np.tile(a, 3)),axis=0)
    
    
    
 
    

## ASSSIGNMENT 11 Get the common items between a and b :
a = np.array([1,2,3,2,3,4,3,4,5,6])
b = np.array([7,2,10,2,7,4,9,4,9,8])

np.intersect1d(a,b)

# -*- coding: utf-8 -*-
"""
Created on Wed Jan 23 20:58:04 2019

@author: Venkat Durga Rao
"""

 

import numpy as np


############# ASSIGNMENT 12 :From array a remove all items present in array b

a = np.array([1,2,3,4,5])
b = np.array([5,6,7,8,9])

np.intersect1d(a,b)  #### like intersect in sql
np.setdiff1d(a,b)  ### like minus in sql


################  ASSIGM=NMENT 13 :Get the positions where elements of a and b match

a = np.array([1,2,3,2,3,4,3,4,5,6])
b = np.array([7,2,10,2,7,4,9,4,9,8])

np.where(a==b)  ####  where class returns the position of index 
np.where(a<5)

######  ASSIGNMENT 14 Get all items between 5 and 10 from a.

a = np.array([2, 6, 1, 9, 10, 3, 27])


a[np.where((a >= 5) & (a <= 10))]


# Method 3: (thanks loganzk!)
a[(a >= 5) & (a <= 10)]

##### ASSIGNMENT 15Convert the function maxx that works on two scalars, to work on two arrays.

def maxx(x, y):
    """Get the maximum of two items"""
    
    if x >= y:
        return x
    else:
        return y

maxx(1, 5)
#> 5

a = np.array([5, 7, 9, 8, 6, 4, 5])
b = np.array([6, 3, 4, 8, 9, 7, 1])

pair_max=np.vectorize(maxx)
pair_max(a, b)

###########assignment 16 :Swap columns 1 and 2 in the array arr.
arr = np.arange(9).reshape(3,3)
arr[:,[1,0,2]]

######3  assignment 17 :Swap rows 1 and 2 in the array arr:
arr = np.arange(9).reshape(3,3)
arr[[1,0,2],:]

############# assignment 18 Reverse the rows of a 2D array arr.

arr = np.arange(9).reshape(3,3)

## Method 1 
arr[np.arange(2,-1,-1),:]
## Method 2 
arr[::-1]

#### assignment 19 Reverse the columns of a 2D array arr.

arr = np.arange(9).reshape(3,3)

# Solution
arr[:, ::-1]

arr[:,np.arange(2,-1,-1)]

####Assignment 20:Create a 2D array of shape 5x3 to contain random decimal numbers between 5 and 10.

np.random.randint(low=5,high=10,size=(5,3))
np.random.uniform(5,10,size=(5,3))


#### assignment 21 :Print or show only 3 decimal places of the numpy array rand_arr.

rand_arr=np.random.random(size=(5,3))
np.set_printoptions(precision=3)
rand_arr

####### assignment 22 :Pretty print rand_arr by suppressing the scientific notation (like 1e10)


np.random.seed(100)
rand_arr = np.random.random([3,3])/1e3
rand_arr

np.set_printoptions(suppress=True)
rand_arr


#### assignment 23 :Limit the number of items printed in python numpy array a to a maximum of 6 elements.


#> array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])

np.set_printoptions(threshold=2)
a = np.arange(15)
a

######## assignment 24 :Print the full numpy array a without truncating.

np.set_printoptions(threshold=np.nan)
a = np.arange(15)
a


################ assignment 25 :Import the iris dataset keeping the text intact.











      
